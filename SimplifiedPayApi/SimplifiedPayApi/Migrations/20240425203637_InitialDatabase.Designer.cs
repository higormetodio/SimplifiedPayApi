// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimplifiedPayApi.Context;

#nullable disable

namespace SimplifiedPayApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240425203637_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimplifiedPayApi.Models.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DEPOSITS", (string)null);
                });

            modelBuilder.Entity("SimplifiedPayApi.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("MONEY");

                    b.Property<int>("PayerId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayerId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("TRANSACTIONS", (string)null);
                });

            modelBuilder.Entity("SimplifiedPayApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email")
                        .HasName("UQ_USERS_EMAIL");

                    b.HasAlternateKey("IdentificationNumber")
                        .HasName("UQ_USERS_IDENTIFICATION_NUMBER");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_USERS_EMAIL");

                    b.HasIndex("IdentificationNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_USERS_IDENTIFICATION_NUMBER");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("SimplifiedPayApi.Models.Deposit", b =>
                {
                    b.HasOne("SimplifiedPayApi.Models.User", "User")
                        .WithMany("Deposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_DEPOSITS_USERS");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimplifiedPayApi.Models.Transaction", b =>
                {
                    b.HasOne("SimplifiedPayApi.Models.User", "Payer")
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TRANSACTIONS_USERS_PAYER");

                    b.HasOne("SimplifiedPayApi.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TRANSACTIONS_USERS_RECEIVER");

                    b.HasOne("SimplifiedPayApi.Models.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Payer");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("SimplifiedPayApi.Models.User", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
